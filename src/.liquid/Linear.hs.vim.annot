1:1-1:1::Linear.$trModule :: "GHC.Types.Module"
10:1-10:4::Linear.dot :: "forall a . (GHC.Num.Num<[]> a) => [a] -> [a] -> a"
10:5-10:6::x :: "[a]"
10:7-10:8::y :: "[a]"
10:15-10:32::lq_anf$##7205759403792805328 :: "{v : [a] | len v <= len x\n           && len v <= len y}"
10:24-10:27::lq_anf$##7205759403792805327 :: "x1:a -> x2:a -> {VV : a | VV == x1 * x2}"
10:28-10:29::x :: "{v : [a] | len v >= 0\n           && v == x}"
10:30-10:31::y :: "{v : [a] | len v >= 0\n           && v == y}"
13:1-13:4::Linear.add :: "forall a . (GHC.Num.Num<[]> a) => [a] -> [a] -> [a]"
13:5-13:6::x :: "[a]"
13:7-13:8::y :: "[a]"
13:19-13:22::lq_anf$##7205759403792805329 :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
13:23-13:24::x :: "{v : [a] | len v >= 0\n           && v == x}"
13:25-13:26::y :: "{v : [a] | len v >= 0\n           && v == y}"
16:1-16:9::Linear.subtract :: "forall a . (GHC.Num.Num<[]> a) => [a] -> [a] -> [a]"
16:10-16:11::x :: "[a]"
16:12-16:13::y :: "[a]"
16:24-16:27::lq_anf$##7205759403792805330 :: "x1:a -> x2:a -> {VV : a | VV == x1 - x2}"
16:28-16:29::x :: "{v : [a] | len v >= 0\n           && v == x}"
16:30-16:31::y :: "{v : [a] | len v >= 0\n           && v == y}"
19:1-19:6::Linear.scale :: "forall a . (GHC.Num.Num<[]> a) => [a] -> a -> [a]"
19:7-19:8::x :: "[a]"
19:9-19:10::c :: "a"
19:17-19:22::lq_anf$##7205759403792805331 :: "x1:a -> {VV : a | VV == c * x1}"
19:18-19:19::c :: "{VV : a | VV == c}"
19:23-19:24::x :: "{v : [a] | len v >= 0\n           && v == x}"
22:1-22:4::Linear.row :: "forall a . [[a]] -> GHC.Types.Int -> [a]"
22:5-22:6::x :: "[[a]]"
22:7-22:8::i :: "GHC.Types.Int"
22:11-22:12::x :: "{v : [[a]] | len v >= 0\n             && v == x}"
22:16-22:17::i :: "{v : GHC.Types.Int | v == i}"
25:1-25:7::Linear.column :: "forall a . [[a]] -> GHC.Types.Int -> [a]"
25:8-25:9::x :: "[[a]]"
25:10-25:11::j :: "GHC.Types.Int"
25:18-25:24::_ :: "a"
25:22-25:23::j :: "{v : GHC.Types.Int | v == j}"
25:25-25:26::x :: "{v : [[a]] | len v >= 0\n             && v == x}"
28:1-28:9::Linear.getValue :: "forall a . [[a]] -> GHC.Types.Int -> GHC.Types.Int -> a"
28:10-28:11::x :: "[[a]]"
28:12-28:13::i :: "GHC.Types.Int"
28:14-28:15::j :: "GHC.Types.Int"
28:18-28:26::lq_anf$##7205759403792805333 :: "[a]"
28:19-28:20::x :: "{v : [[a]] | len v >= 0\n             && v == x}"
28:24-28:25::i :: "{v : GHC.Types.Int | v == i}"
28:30-28:31::j :: "{v : GHC.Types.Int | v == j}"
31:1-31:9::Linear.setValue :: "forall a . [[a]] -> GHC.Types.Int -> GHC.Types.Int -> a -> [[a]]"
31:10-31:11::x :: "[[a]]"
31:12-31:13::i :: "GHC.Types.Int"
31:14-31:15::j :: "GHC.Types.Int"
31:16-31:17::a :: "a"
31:28-31:29::i :: "{v : GHC.Types.Int | v == i}"
31:30-31:53::lq_anf$##7205759403792805341 :: "[a]"
31:39-31:40::j :: "{v : GHC.Types.Int | v == j}"
31:41-31:42::a :: "{VV : a | VV == a}"
31:43-31:52::lq_anf$##7205759403792805340 :: "[a]"
31:48-31:49::x :: "{v : [[a]] | len v >= 0\n             && v == x}"
31:50-31:51::i :: "{v : GHC.Types.Int | v == i}"
31:54-31:55::x :: "{v : [[a]] | len v >= 0\n             && v == x}"
34:1-34:8::Linear.replace :: "forall a . GHC.Types.Int -> a -> [a] -> [a]"
34:9-34:12::pos :: "GHC.Types.Int"
34:13-34:19::newVal :: "a"
34:20-34:24::list :: "[a]"
34:27-34:40::lq_anf$##7205759403792805334 :: "{v : [a] | (pos >= 0 => len v == (if len list < pos then len list else pos))\n           && (not (pos >= 0) => len v == 0)}"
34:32-34:35::pos :: "{v : GHC.Types.Int | v == pos}"
34:36-34:40::list :: "{v : [a] | len v >= 0\n           && v == list}"
34:44-34:50::newVal :: "{VV : a | VV == newVal}"
34:53-34:70::lq_anf$##7205759403792805338 :: "[a]"
34:58-34:65::lq_anf$##7205759403792805337 :: "GHC.Types.Int"
34:59-34:62::pos :: "{v : GHC.Types.Int | v == pos}"
34:63-34:64::lq_anf$##7205759403792805336 :: "GHC.Types.Int"
34:66-34:70::list :: "{v : [a] | len v >= 0\n           && v == list}"
37:1-37:10::Linear.transpose :: "forall a . [[a]] -> [[a]]"
37:11-37:12::x :: "[[a]]"
37:19-37:29::lq_anf$##7205759403792805357 :: "GHC.Types.Int -> [a]"
37:27-37:28::x :: "{v : [[a]] | len v >= 0\n             && v == x}"
37:30-37:61::lq_anf$##7205759403792805366 :: "[GHC.Types.Int]"
37:31-37:32::lq_anf$##7205759403792805359 :: "GHC.Types.Int"
37:34-37:60::lq_anf$##7205759403792805365 :: "GHC.Types.Int"
37:35-37:55::lq_anf$##7205759403792805362 :: "GHC.Types.Int"
37:36-37:39::_ :: "{VV : forall a b .\n      x1:(a, b) -> {VV : b | VV == snd x1} | VV == snd}"
37:42-37:54::lq_anf$##7205759403792805361 :: "(GHC.Types.Int, GHC.Types.Int)"
37:53-37:54::x :: "{v : [[a]] | len v >= 0\n             && v == x}"
37:58-37:59::lq_anf$##7205759403792805364 :: "GHC.Types.Int"
40:1-40:11::Linear.dimensions :: "forall a . [[a]] -> (GHC.Types.Int, GHC.Types.Int)"
40:12-40:13::x :: "[[a]]"
40:17-40:25::lq_anf$##7205759403792805342 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len x}"
40:24-40:25::x :: "{v : [[a]] | len v >= 0\n             && v == x}"
40:27-40:42::lq_anf$##7205759403792805346 :: "{v : GHC.Types.Int | v >= 0}"
40:34-40:42::lq_anf$##7205759403792805345 :: "[a]"
40:35-40:36::x :: "{v : [[a]] | len v >= 0\n             && v == x}"
40:40-40:41::lq_anf$##7205759403792805344 :: "GHC.Types.Int"
43:1-43:10::Linear.dimension :: "forall a . [[a]] -> GHC.Types.Int"
43:11-43:12::x :: "[[a]]"
43:15-43:35::lq_anf$##7205759403792805349 :: "GHC.Types.Int"
43:16-43:19::_ :: "{VV : forall a b .\n      x1:(a, b) -> {VV : a | VV == fst x1} | VV == fst}"
43:22-43:34::lq_anf$##7205759403792805348 :: "(GHC.Types.Int, GHC.Types.Int)"
43:33-43:34::x :: "{v : [[a]] | len v >= 0\n             && v == x}"
43:38-43:58::lq_anf$##7205759403792805352 :: "GHC.Types.Int"
43:39-43:42::_ :: "{VV : forall a b .\n      x1:(a, b) -> {VV : b | VV == snd x1} | VV == snd}"
43:45-43:57::lq_anf$##7205759403792805351 :: "(GHC.Types.Int, GHC.Types.Int)"
43:56-43:57::x :: "{v : [[a]] | len v >= 0\n             && v == x}"
46:1-46:5::Linear.rows :: "forall a . [[a]] -> GHC.Types.Int"
46:6-46:7::x :: "[[a]]"
46:10-46:13::_ :: "{VV : forall a b .\n      x1:(a, b) -> {VV : a | VV == fst x1} | VV == fst}"
46:16-46:28::lq_anf$##7205759403792805354 :: "(GHC.Types.Int, GHC.Types.Int)"
46:27-46:28::x :: "{v : [[a]] | len v >= 0\n             && v == x}"
49:1-49:8::Linear.columns :: "forall a . [[a]] -> GHC.Types.Int"
49:9-49:10::x :: "[[a]]"
49:13-49:16::_ :: "{VV : forall a b .\n      x1:(a, b) -> {VV : b | VV == snd x1} | VV == snd}"
49:19-49:31::lq_anf$##7205759403792805356 :: "(GHC.Types.Int, GHC.Types.Int)"
49:30-49:31::x :: "{v : [[a]] | len v >= 0\n             && v == x}"
52:1-52:9::Linear.multiply :: "forall a . (GHC.Num.Num<[]> a) => [[a]] -> [[a]] -> [[a]]"
52:10-52:11::x :: "[[a]]"
52:12-52:13::y :: "[[a]]"
52:16-52:32::Linear.group :: "{VV : forall a . GHC.Types.Int -> [a] -> [[a]] | VV == group}"
52:22-52:23::p :: "{v : GHC.Types.Int | v == p}"
52:24-52:32::products :: "{v : [a] | len v >= 0\n           && v == products}"
54:5-54:6::p :: "GHC.Types.Int"
54:9-54:18::_ :: "GHC.Types.Int"
54:17-54:18::y :: "{v : [[a]] | len v >= 0\n             && v == y}"
55:5-55:13::products :: "[a]"
55:16-55:54::lq_anf$##7205759403792805389 :: "[a]"
55:17-55:24::lq_anf$##7205759403792805388 :: "a"
55:21-55:22::ds_d333 :: "{v : [a] | len v >= 0}"
55:23-55:24::ds_d337 :: "{v : [a] | len v >= 0}"
55:32-55:33::x :: "{v : [[a]] | len v >= 0\n             && v == x}"
55:40-55:53::lq_anf$##7205759403792805390 :: "[[a]]"
55:51-55:52::y :: "{v : [[a]] | len v >= 0\n             && v == y}"
58:1-58:6::Linear.group :: "forall a . GHC.Types.Int -> [a] -> [[a]]"
58:14-58:16::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0} | VV == []}"
59:13-59:23::lq_anf$##7205759403792805368 :: "[a]"
59:19-59:20::ds_d317 :: "GHC.Types.Int"
59:21-59:22::ds_d318 :: "{v : [a] | len v >= 0}"
59:26-59:46::lq_anf$##7205759403792805370 :: "[[a]]"
59:33-59:34::ds_d317 :: "GHC.Types.Int"
59:35-59:45::lq_anf$##7205759403792805369 :: "[a]"
59:41-59:42::ds_d317 :: "GHC.Types.Int"
59:43-59:44::ds_d318 :: "{v : [a] | len v >= 0}"
62:1-62:12::Linear.show_matrix :: "forall a . (GHC.Show.Show<[]> a) => [[a]] -> (GHC.Types.IO ())"
62:13-62:14::m :: "[[a]]"
62:23-62:31::System.IO.putStrLn :: "[GHC.Types.Char] -> (GHC.Types.IO ())"
62:32-62:44::lq_anf$##7205759403792805395 :: "{v : [[GHC.Types.Char]] | len v == len m}"
62:37-62:41::lq_anf$##7205759403792805394 :: "[a] -> [GHC.Types.Char]"
62:42-62:43::m :: "{v : [[a]] | len v >= 0\n             && v == m}"
65:1-65:16::Linear.generate_matrix :: "GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Float -> [[GHC.Types.Float]]"
65:17-65:18::x :: "GHC.Types.Int"
65:19-65:20::y :: "GHC.Types.Int"
65:21-65:22::z :: "GHC.Types.Float"
65:25-65:39::Linear.group :: "{VV : forall a . GHC.Types.Int -> [a] -> [[a]] | VV == group}"
65:31-65:32::y :: "{v : GHC.Types.Int | v == y}"
65:33-65:39::values :: "{v : [GHC.Types.Float] | len v >= 0\n                         && v == values}"
66:5-66:11::values :: "[GHC.Types.Float]"
66:14-66:69::lq_anf$##7205759403792805379 :: "[GHC.Types.Float]"
66:15-66:16::z :: "{v : GHC.Types.Float | v == z}"
66:19-66:41::lq_anf$##7205759403792805377 :: "GHC.Types.Float"
66:20-66:32::lq_anf$##7205759403792805375 :: "x1:GHC.Types.Int -> {v : GHC.Types.Float | v == x1}"
66:35-66:36::ds_d31M :: "GHC.Types.Int"
66:39-66:40::ds_d31Q :: "GHC.Types.Int"
66:49-66:55::lq_anf$##7205759403792805385 :: "[GHC.Types.Int]"
66:50-66:51::lq_anf$##7205759403792805384 :: "GHC.Types.Int"
66:53-66:54::x :: "{v : GHC.Types.Int | v == x}"
66:62-66:68::lq_anf$##7205759403792805382 :: "[GHC.Types.Int]"
66:63-66:64::lq_anf$##7205759403792805381 :: "GHC.Types.Int"
66:66-66:67::y :: "{v : GHC.Types.Int | v == y}"